{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "storageAccountName": {
            "type": "string",
            "defaultValue": "sadelo003poc1",
            "metadata": {
                "description": "description"
            }
        },
        "portalName": {
            "type": "string",
            "defaultValue": "[uniqueString(resourceGroup().id)]",
            "metadata": {
                "description": "The name of the app to create."
            }
        },
        "apiName": {
            "type": "string",
            "defaultValue": "da-webapi-poc",
            "metadata": {
                "description": "The name of the app to create."
            }
        },
        "appServicePlanName": {
            "type": "string",
            "defaultValue": "[uniqueString(subscription().subscriptionId)]",
            "metadata": {
                "description": "The name of the app service plan to create."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "The location in which all resources should be deployed."
            }
        },
        "sqlAdministratorLogin": {
            "type": "string",
            "defaultValue": "deloadmin",
            "metadata": {
                "description": "The admin user of the SQL Server"
            }
        },
        "sqlAdministratorLoginPassword": {
            "type": "securestring",
            "defaultValue": "Terafru5",
            "metadata": {
                "description": "The password of the admin user of the SQL Server"
            }
        },
        "keyVaultName": {
            "type": "string",
            "metadata": {
                "description": "Specifies the name of the key vault."
            }
        },
        "enabledForDeployment": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
            }
        },
        "enabledForDiskEncryption": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
            }
        },
        "enabledForTemplateDeployment": {
            "type": "bool",
            "defaultValue": false,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
            }
        },
        "tenantId": {
            "type": "string",
            "defaultValue": "[subscription().tenantId]",
            "metadata": {
                "description": "Specifies the Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Get it by using Get-AzSubscription cmdlet."
            }
        },
        "objectId": {
            "type": "string",
            "metadata": {
                "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
            }
        },
        "keysPermissions": {
            "type": "array",
            "defaultValue": [
                "list"
            ],
            "metadata": {
                "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
            }
        },
        "secretsPermissions": {
            "type": "array",
            "defaultValue": [
                "list",
                "get"
            ],
            "metadata": {
                "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
            }
        },
        "skuName": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "Specifies whether the key vault is a standard vault or a premium vault."
            }
        },
        "AdminConsultDBPassword": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "AdminConsultPassword": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "AdminConsultUser": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "AuthenticationApiKeyWebAPI": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "AzureSearchApiKey": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "AzureStorageConnectionString": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "CentralAdminContext": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "CentralAdminContextSwift": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "CentralAdminMasterDataFunctionKey": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "CertificateThumbprintWebApi": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "CostAllocationApiAuthClientSecret": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "CostAllocationApiClientSecret": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "DADatabasePassword": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "DAStorageAccountKey": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "DASysInterfacesPassword": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "DataLakeSPKey": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "EDreamsToken": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "EOLClientSecret": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "ERPServiceBusConnectionString": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "ExactOnlineClientSecret": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "ExactOnlineServiceBusConnectionString": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "IDAClientSecretPortal": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "IDAClientSecretWeb": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "IDAClientSecretWebApi": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "InstrumentationKeyEmailSummary": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "InstrumentationKeyERPWebJobs": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "InstrumentationKeyExactOnlineWebJobs": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "InstrumentationKeyLyantheWebJobs": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "InstrumentationKeyPortal": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "InstrumentationKeySilverfinWebJobs": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "InstrumentationKeyWeb": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "InstrumentationKeyWebAPI": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "LyanthePassword": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "LyantheSOAPPassword": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "RedisCacheConnectionString": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "RelayKey": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "SendGridAPIKey": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "ServiceBusConnectionString": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "ServiceBusConnectionStringERP": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "ServiceBusConnectionStringExactOnline": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "ServiceBusConnectionStringLyanthe": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "ServiceBusConnectionStringSilverfin": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "SilverfinApiKey": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "SilverfinClientSecret": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "SilverfinServiceBusConnectionString": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "SmtpPass": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        },
        "TaxAntivirusClientSecret": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        }



    },
    "variables": {
        "vnetName": "vnet",
        "vnetAddressPrefix": "10.0.0.0/16",
        "subnetNameApps": "myappservice",
        "subnetNameData": "mydataservice",
        "subnetAppsAddressPrefix": "10.0.0.0/24",
        "subnetDataAddressPrefix": "10.0.1.0/24",
        "appInsightsNamePortal": "[concat(parameters('portalName'), '-app-insights')]",
        "appInsightsNameApi": "[concat(parameters('apiName'), '-app-insights')]",
        "appServicePlanSku": "S1",
        "sqlserverName": "[concat('sqlserver', uniqueString(resourceGroup().id))]",
        "databaseName": "sampledb",
        "storageAccountApiVersion": "2018-07-01",  
        "storageAccountNameTidy": "[toLower(trim(parameters('storageAccountName')))]",   
        "blobEndPoint":"[concat('https://',variables('storageAccountNameTidy'),'.blob.core.windows.net/')]"  
    },
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2019-11-01",
            "name": "[variables('vnetName')]",
            "location": "[parameters('location')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnetAddressPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetNameApps')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetAppsAddressPrefix')]",
                            "serviceEndpoints": [
                                {
                                    "service": "Microsoft.KeyVault",
                                    "locations": [
                                        "*"
                                    ]
                                },
                                {
                                    "service": "Microsoft.ServiceBus",
                                    "locations": [
                                        "*"
                                    ]
                                },
                                {
                                    "service": "Microsoft.Sql",
                                    "locations": [
                                        "westeurope"
                                    ]
                                },
                                {
                                    "service": "Microsoft.Storage",
                                    "locations": [
                                        "westeurope",
                                        "northeurope"
                                    ]
                                }
                            ],
                            "delegations": [
                                {
                                    "name": "AppsSubnet",
                                    "properties": {
                                        "serviceName": "Microsoft.Web/serverFarms"

                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "[variables('subnetNameData')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetDataAddressPrefix')]",
                            "delegations": [
                                {
                                    "name": "DataSubnet",
                                    "properties": {
                                        "serviceName": "Microsoft.Web/serverFarms"
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        {
            "apiVersion": "2020-02-02-preview",
            "type": "microsoft.insights/components",
            "name": "[variables('appInsightsNamePortal')]",
            "location": "[parameters('location')]",
            "properties": {
                "ApplicationId": "[variables('appInsightsNamePortal')]",
                "Request_Source": "IbizaWebAppExtensionCreate"
            }
        },
        {
            "apiVersion": "2020-02-02-preview",
            "type": "microsoft.insights/components",
            "name": "[variables('appInsightsNameApi')]",
            "location": "[parameters('location')]",
            "properties": {
                "ApplicationId": "[variables('appInsightsNameApi')]",
                "Request_Source": "IbizaWebAppExtensionCreate"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[parameters('keyVaultName')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "properties": {
                "enabledForDeployment": "[parameters('enabledForDeployment')]",
                "enabledForDiskEncryption": "[parameters('enabledForDiskEncryption')]",
                "enabledForTemplateDeployment": "[parameters('enabledForTemplateDeployment')]",
                "tenantId": "[parameters('tenantId')]",
                "accessPolicies": [
                    {
                        "objectId": "[parameters('objectId')]",
                        "tenantId": "[parameters('tenantId')]",
                        "permissions": {
                            "keys": "[parameters('keysPermissions')]",
                            "secrets": "[parameters('secretsPermissions')]"
                        }
                    }
                ],
                "sku": {
                    "name": "[parameters('skuName')]",
                    "family": "A"
                },
                "networkAcls": {
                    "defaultAction": "Allow",
                    "bypass": "AzureServices"
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/AdminConsultDBPassword')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('AdminConsultDBPassword')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/AdminConsultPassword')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('AdminConsultPassword')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/AdminConsultUser')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('AdminConsultUser')]" } 
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/AuthenticationApiKeyWebAPI')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('AuthenticationApiKeyWebAPI')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/AzureSearchApiKey')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('AzureSearchApiKey')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/AzureStorageConnectionString')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]", "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]" ],
            "properties": { "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountNameTidy'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameTidy')), variables('storageAccountApiVersion')).keys[0].value)]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/CentralAdminContext')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('CentralAdminContext')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/CentralAdminContextSwift')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('CentralAdminContextSwift')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/CentralAdminMasterDataFunctionKey')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('CentralAdminMasterDataFunctionKey')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/CertificateThumbprintWebApi')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('CertificateThumbprintWebApi')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/CostAllocationApiAuthClientSecret')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('CostAllocationApiAuthClientSecret')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/CostAllocationApiClientSecret')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('CostAllocationApiClientSecret')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/DADatabasePassword')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('DADatabasePassword')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/DAStorageAccountKey')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('DAStorageAccountKey')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/DASysInterfacesPassword')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('DASysInterfacesPassword')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/DataLakeSPKey')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('DataLakeSPKey')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/EDreamsToken')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('EDreamsToken')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/EOLClientSecret')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('EOLClientSecret')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/ERPServiceBusConnectionString')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('ERPServiceBusConnectionString')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/ExactOnlineClientSecret')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('ExactOnlineClientSecret')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/ExactOnlineServiceBusConnectionString')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('ExactOnlineServiceBusConnectionString')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/IDAClientSecretPortal')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('IDAClientSecretPortal')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/IDAClientSecretWeb')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('IDAClientSecretWeb')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/IDAClientSecretWebApi')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('IDAClientSecretWebApi')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/InstrumentationKeyEmailSummary')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('InstrumentationKeyEmailSummary')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/InstrumentationKeyERPWebJobs')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('InstrumentationKeyERPWebJobs')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/InstrumentationKeyExactOnlineWebJobs')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('InstrumentationKeyExactOnlineWebJobs')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/InstrumentationKeyLyantheWebJobs')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('InstrumentationKeyLyantheWebJobs')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/InstrumentationKeyPortal')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('InstrumentationKeyPortal')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/InstrumentationKeySilverfinWebJobs')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('InstrumentationKeySilverfinWebJobs')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/InstrumentationKeyWeb')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('InstrumentationKeyWeb')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/InstrumentationKeyWebAPI')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('InstrumentationKeyWebAPI')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/LyanthePassword')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('LyanthePassword')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/LyantheSOAPPassword')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('LyantheSOAPPassword')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/RedisCacheConnectionString')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('RedisCacheConnectionString')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/RelayKey')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('RelayKey')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/SendGridAPIKey')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('SendGridAPIKey')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/ServiceBusConnectionString')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('ServiceBusConnectionString')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/ServiceBusConnectionStringERP')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('ServiceBusConnectionStringERP')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/ServiceBusConnectionStringExactOnline')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('ServiceBusConnectionStringExactOnline')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/ServiceBusConnectionStringLyanthe')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('ServiceBusConnectionStringLyanthe')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/ServiceBusConnectionStringSilverfin')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('ServiceBusConnectionStringSilverfin')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/SilverfinApiKey')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('SilverfinApiKey')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/SilverfinClientSecret')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('SilverfinClientSecret')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/SilverfinServiceBusConnectionString')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('SilverfinServiceBusConnectionString')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/SmtpPass')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('SmtpPass')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(parameters('keyVaultName'), '/TaxAntivirusClientSecret')]",
            "apiVersion": "2019-09-01",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]" ],
            "properties": { "value": "[parameters('TaxAntivirusClientSecret')]" }
        },



        {
            "apiVersion": "2019-06-01",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_RAGRS"
            },
            "kind": "StorageV2",
            "properties": {
                "supportsHttpsTrafficOnly": true,
                "accessTier": "Hot",
                "networkAcls": {
                    "bypass": "AzureServices",
                    "virtualNetworkRules": [
                        {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', variables('vnetName'), variables('subnetNameApps'))]",
                            "action": "Allow",
                            "state": "Succeeded"
                        }
                    ],
                    "ipRules": [],
                    "defaultAction": "Deny"
                },
                "encryption": {
                    "services": {
                        "blob": {
                            "enabled": true
                        },
                        "file": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            }
        },
        {

            "name": "[variables('sqlserverName')]",
            "type": "Microsoft.Sql/servers",
            "location": "[parameters('location')]",
            "tags": {
                "displayName": "SqlServer"
            },
            "apiVersion": "2018-06-01-preview",
            "properties": {
                "administratorLogin": "[parameters('sqlAdministratorLogin')]",
                "administratorLoginPassword": "[parameters('sqlAdministratorLoginPassword')]",
                "version": "12.0"
            },
            "resources": [
                {
                    "name": "[variables('databaseName')]",
                    "type": "databases",
                    "location": "[parameters('location')]",
                    "tags": {
                        "displayName": "Database"
                    },
                    "apiVersion": "2018-06-01-preview",
                    "dependsOn": [
                        "[variables('sqlserverName')]"
                    ],
                    "properties": {
                        "edition": "Basic",
                        "collation": "SQL_Latin1_General_CP1_CI_AS",
                        "maxSizeBytes": "1073741824",
                        "requestedServiceObjectiveName": "Basic"
                    }
                },
                {
                    "type": "firewallrules",
                    "apiVersion": "2018-06-01-preview",
                    "dependsOn": [
                        "[variables('sqlserverName')]"
                    ],
                    "location": "[parameters('location')]",
                    "name": "AllowAllWindowsAzureIps",
                    "properties": {
                        "endIpAddress": "0.0.0.0",
                        "startIpAddress": "0.0.0.0"
                    }
                },
                {
                    "apiVersion": "2020-02-02-preview",
                    "type": "virtualNetworkRules",
                    "name": "[concat('allow-access-from-', variables('subnetNameApps'))]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers/', variables('sqlServerName'))]",
                        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                    ],
                    "properties": {
                        "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', variables('vnetName'), variables('subnetNameApps'))]"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2019-08-01",
            "name": "[parameters('appServicePlanName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[variables('appServicePlanSku')]"
            },
            "kind": "app"
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2019-08-01",
            "name": "[parameters('portalName')]",
            "location": "[parameters('location')]",
            "kind": "app",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverFarms', parameters('appServicePlanName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ],
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverFarms', parameters('appServicePlanName'))]"
            },
            "resources": [
                {
                    "name": "virtualNetwork",
                    "type": "networkConfig",
                    "apiVersion": "2019-08-01",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('portalName'))]"
                    ],
                    "properties": {
                        "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetNameApps'))]",
                        "swiftSupported": true
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2019-08-01",
            "name": "[parameters('apiName')]",
            "location": "[parameters('location')]",
            "kind": "app",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverFarms', parameters('appServicePlanName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ],
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverFarms', parameters('appServicePlanName'))]",
                "siteConfig": {
                    "http20Enabled": "true",
                    "minTlsVersion": "1.2",
                    "ipSecurityRestrictions": [
                        {
                            "vnetSubnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', variables('vnetName'), variables('subnetNameApps'))]",
                            "action": "Allow",
                            "tag": "Default",
                            "priority": 200,
                            "name": "appSubnet",
                            "description": "Isolate traffic to subnet containing app services"
                        }
                    ]
                },
                "httpsOnly": true
            },
            "resources": [
                {
                    "name": "virtualNetwork",
                    "type": "networkConfig",
                    "apiVersion": "2019-08-01",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', parameters('apiName'))]"
                    ],
                    "properties": {
                        "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnetNameApps'))]",
                        "swiftSupported": true
                    }
                }
            ]
        }
    ]
}