{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vnetId": {
            "type": "string",
            "metadata": {
                "description": "description"
            }
        },
        "subnetIdApps": {
            "type": "string",
            "metadata": {
                "description": "description"
            }
        },
        "subnetIdData": {
            "type": "string",
            "metadata": {
                "description": "description"
            }
        },
        "backupStorageAccountKey": {
            "type": "string",
            "metadata": {
                "description": "Specifies the key of the storage account where the BACPAC file is stored."
            }
        },
        "createRedis": {
            "type": "string",
            "metadata": {
                "description": "description"
            }
        },
        "redisCacheName": {
            "type": "string",
            "metadata": {
                "description": "Specify the name of the Azure Redis Cache to create."
            }
        },
        "redisCacheSKU": {
            "type": "string",
            "defaultValue": "Basic",
            "allowedValues": [
                "Basic",
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "Specify the pricing tier of the new Azure Redis Cache."
            }
        },
        "redisCacheFamily": {
            "type": "string",
            "defaultValue": "C",
            "allowedValues": [
                "C",
                "P"
            ],
            "metadata": {
                "description": "Specify the family for the sku. C = Basic/Standard, P = Premium."
            }
        },
        "redisCacheCapacity": {
            "type": "int",
            "defaultValue": 1,
            "allowedValues": [
                0,
                1,
                2,
                3,
                4,
                5,
                6
            ],
            "metadata": {
                "description": "Specify the size of the new Azure Redis Cache instance. Valid values: for C (Basic/Standard) family (0, 1, 2, 3, 4, 5, 6), for P (Premium) family (1, 2, 3, 4)"
            }
        },
        "enableNonSslPort": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Specify a boolean value that indicates whether to allow access via non-SSL ports."
            }
        },
        "diagnosticsEnabled": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Specify a boolean value that indicates whether diagnostics should be saved to the specified storage account."
            }
        },
        "restoreDBBackup": {
            "type": "string",
            "defaultValue": "no",
            "metadata": {
                "description": "description"
            }
        },
        "bacpacUrl": {
            "type": "string",
            "metadata": {
                "description": "Specifies the URL of the BACPAC file."
            }
        },

        "existingKeyVaultId": {
            "type": "string",
            "metadata": {
                "description": "Existing Key Vault resource Id with an access policy to allow Microsoft.Web RP to read Key Vault secrets (Checkout README.md for more information)"
            }
        },
        "existingKeyVaultSecretName": {
            "type": "string",
            "metadata": {
                "description": "Key Vault Secret that contains a PFX certificate"
            }
        },
        "databaseMaxSizeBytes": {
            "type": "string",
            "metadata": {
                "description": "description"
            }
        },
        "objectId": {
            "type": "string",
            "metadata": {
                "description": "Specifies the object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies. Get it by using Get-AzADUser or Get-AzADServicePrincipal cmdlets."
            }
        },
        "keysPermissions": {
            "type": "array",
            "defaultValue": [
                "list"
            ],
            "metadata": {
                "description": "Specifies the permissions to keys in the vault. Valid values are: all, encrypt, decrypt, wrapKey, unwrapKey, sign, verify, get, list, create, update, import, delete, backup, restore, recover, and purge."
            }
        },
        "secretsPermissions": {
            "type": "array",
            "defaultValue": [
                "list",
                "get"
            ],
            "metadata": {
                "description": "Specifies the permissions to secrets in the vault. Valid values are: all, get, list, set, delete, backup, restore, recover, and purge."
            }
        },
        "skuName": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Standard",
                "Premium"
            ],
            "metadata": {
                "description": "Specifies whether the key vault is a standard vault or a premium vault."
            }
        },
        "CentralAdminMasterDataFunctionKey": {
            "type": "securestring",
            "metadata": { "description": "Specifies the value of the secret that you want to create." }
        }


    },
    "variables": {
        "keyVaultName" : "[concat(resourceGroup().name, 'KeyVault')]",
        "enabledForDeployment": "true",
        "enabledForDiskEncryption": "true",
        "enabledForTemplateDeployment": "true",
        "storageAccountName": "[concat(resourceGroup().name, 'Storage')]",
        "tenantId": "[subscription().tenantId]",
        "sqlserverName": "[concat(resourceGroup().name, '-SqlServer')]",
        "databaseName": "[concat(resourceGroup().name, '-Db')]",
        "sqlAdministratorLogin": "[concat('l', uniqueString(resourceGroup().id, '9A08DDB9-95A1-495F-9263-D89738ED4205'))]",
        "sqlAdministratorLoginPassword": "[concat('P', uniqueString(resourceGroup().id, '224F5A8B-51DB-46A3-A7C8-59B0DD584A41'), 'x', '!')]",
        "portalName": "[concat(resourceGroup().name, '-Portal')]",
        "apiName": "[concat(resourceGroup().name, '-Api')]",
        "centraladminName": "[concat(resourceGroup().name, '-CentralAdmin')]",
        "appServicePlanName": "[concat(resourceGroup().name, '-AppSP')]",
        "certificateName": "[concat(resourceGroup().name, '-AuthCert')]",
        "location": "[resourceGroup().location]",
        "startIpAddress": "195.234.32.0",
        "endIpAddress": "195.234.32.255",
        "appInsightsNamePortal": "[concat(variables('portalName'), '-app-insights')]",
        "appInsightsNameApi": "[concat(variables('apiName'), '-app-insights')]",
        "appInsightsNameCA": "[concat(variables('centraladminName'), '-app-insights')]",
        "appServicePlanSku": "S1",
        "DatabaseConnectionString": "[concat('Server=tcp:',variables('sqlserverName'),'.database.windows.net,1433;Initial Catalog=',variables('databaseName'),';Persist Security Info=False;User ID=',variables('sqlAdministratorLogin'),';Password=',variables('sqlAdministratorLoginPassword'),';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]",
        "storageAccountApiVersion": "2018-07-01",
        "storageAccountNameTidy": "[toLower(trim(variables('storageAccountName')))]"
    },
    "resources": [
        {
            "apiVersion": "2019-09-01",
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('keyVaultName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('apiName'))]",
                "[resourceId('Microsoft.Web/sites', variables('portalName'))]",
                "[resourceId('Microsoft.Web/sites', variables('centraladminName'))]"
            ],
            "properties": {
                "enabledForDeployment": "[variables('enabledForDeployment')]",
                "enabledForDiskEncryption": "[variables('enabledForDiskEncryption')]",
                "enabledForTemplateDeployment": "[variables('enabledForTemplateDeployment')]",
                "tenantId": "[variables('tenantId')]",
                "accessPolicies": [
                    {
                        "objectId": "[parameters('objectId')]",
                        "tenantId": "[variables('tenantId')]",
                        "permissions": {
                            "keys": "[parameters('keysPermissions')]",
                            "secrets": "[parameters('secretsPermissions')]"
                        }
                    },
                    {
                        "tenantId": "[reference(resourceId('Microsoft.Web/sites', variables('portalName')), '2018-02-01', 'Full').identity.tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('portalName')), '2018-02-01', 'Full').identity.principalId]",
                        "permissions": {
                            "secrets": [ "get" ]
                        }
                    },
                    {
                        "tenantId": "[reference(resourceId('Microsoft.Web/sites', variables('centraladminName')), '2018-02-01', 'Full').identity.tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('centraladminName')), '2018-02-01', 'Full').identity.principalId]",
                        "permissions": {
                            "secrets": [ "get" ]
                        }
                    },
                    {
                        "tenantId": "[reference(resourceId('Microsoft.Web/sites', variables('apiName')), '2018-02-01', 'Full').identity.tenantId]",
                        "objectId": "[reference(resourceId('Microsoft.Web/sites', variables('apiName')), '2018-02-01', 'Full').identity.principalId]",
                        "permissions": {
                            "secrets": [ "get" ]
                        }
                    }
                ],
                "sku": {
                    "name": "[parameters('skuName')]",
                    "family": "A"
                },
                "networkAcls": {
                    "defaultAction": "Allow",
                    "bypass": "AzureServices"
                }
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/AdminConsultDBPassword')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/AdminConsultPassword')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/AdminConsultUser')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/AuthenticationApiKeyWebAPI')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/AzureStorageConnectionString')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]", "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]" ],
            "properties": { "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountNameTidy'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountNameTidy')), variables('storageAccountApiVersion')).keys[0].value,';EndpointSuffix=core.windows.net')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/CentralAdminContext')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ],
            "properties": { "value": "[variables('DatabaseConnectionString')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/CentralAdminContextSwift')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ],
            "properties": { "value": "[variables('DatabaseConnectionString')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/CentralAdminMasterDataFunctionKey')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ],
            "properties": { "value": "[parameters('CentralAdminMasterDataFunctionKey')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/CertificateThumbprintWebApi')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "[resourceId('Microsoft.Web/certificates', variables('certificateName'))]"
            ],
            "properties": { "value": "[reference(resourceId('Microsoft.Web/certificates', variables('certificateName'))).Thumbprint]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/CostAllocationApiAuthClientSecret')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/CostAllocationApiClientSecret')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/DADatabasePassword')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ],
            "properties": { "value": "[variables('sqlAdministratorLoginPassword')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/DAStorageAccountKey')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/DASysInterfacesPassword')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/DataLakeSPKey')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/EDreamsToken')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/EOLClientSecret')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/ERPServiceBusConnectionString')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/ExactOnlineClientSecret')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/ExactOnlineServiceBusConnectionString')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/IDAClientSecretPortal')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/IDAClientSecretWeb')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/IDAClientSecretWebApi')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/InstrumentationKeyEmailSummary')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/InstrumentationKeyERPWebJobs')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/InstrumentationKeyExactOnlineWebJobs')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/InstrumentationKeyLyantheWebJobs')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/InstrumentationKeyPortal')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ],
            "properties": { "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsNamePortal')), '2014-04-01').InstrumentationKey]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/InstrumentationKeySilverfinWebJobs')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/InstrumentationKeyWeb')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ],
            "properties": { "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsNameCA')), '2014-04-01').InstrumentationKey]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/InstrumentationKeyWebAPI')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ],
            "properties": { "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsNameApi')), '2014-04-01').InstrumentationKey]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/LyanthePassword')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/LyantheSOAPPassword')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/RedisCacheConnectionString')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]", "[resourceId('Microsoft.Cache/Redis', parameters('redisCacheName'))]" ],
            "properties": { "value": "[concat(parameters('redisCacheName'),'.redis.cache.windows.net:6380,password=',listKeys(resourceId('Microsoft.Cache/Redis', parameters('redisCacheName')), '2019-07-01').primaryKey,',ssl=True,sslProtocols=tls12,abortConnect=False,syncTimeout=15000')]" }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/RelayKey')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/SendGridAPIKey')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/ServiceBusConnectionString')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/ServiceBusConnectionStringERP')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/ServiceBusConnectionStringExactOnline')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/ServiceBusConnectionStringLyanthe')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/ServiceBusConnectionStringSilverfin')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/SilverfinApiKey')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/SilverfinClientSecret')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/SilverfinServiceBusConnectionString')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/SmtpPass')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[concat(variables('keyVaultName'), '/TaxAntivirusClientSecret')]",
            "apiVersion": "2019-09-01",
            "location": "[variables('location')]",
            "dependsOn": [ "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]" ]
        },
        {
            "apiVersion": "2019-06-01",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "Standard_RAGRS"
            },
            "kind": "StorageV2",
            "properties": {
                "supportsHttpsTrafficOnly": true,
                "accessTier": "Hot",
                "networkAcls": {
                    "bypass": "AzureServices",
                    /*  "virtualNetworkRules": [
                        {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets/', parameters('vnetName'), parameters('subnetNameApps'))]",
                            "action": "Allow",
                            "state": "Succeeded"
                        }
                    ], */
                    "ipRules": [],
                    "defaultAction": "Allow"
                },
                "encryption": {
                    "services": {
                        "blob": {
                            "enabled": true
                        },
                        "file": {
                            "enabled": true
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            }
        },
        {
            "condition": "[equals(parameters('createRedis'),'yes')]",
            "type": "Microsoft.Cache/Redis",
            "apiVersion": "2019-07-01",
            "name": "[parameters('redisCacheName')]",
            "location": "[variables('location')]",
            "properties": {
                "enableNonSslPort": "[parameters('enableNonSslPort')]",
                "minimumTlsVersion": "1.2",
                "sku": {
                    "capacity": "[parameters('redisCacheCapacity')]",
                    "family": "[parameters('redisCacheFamily')]",
                    "name": "[parameters('redisCacheSKU')]"
                }
            }
            /*  ,
            "resources": [
                {
                    "type": "Microsoft.Cache/redis/providers/diagnosticsettings",
                    "apiVersion": "2017-05-01-preview",
                    "name": "[concat(parameters('redisCacheName'), '/Microsoft.Insights/', parameters('redisCacheName'))]",
                    "location": "[variables('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Cache/Redis', parameters('redisCacheName'))]"
                    ],
                    "properties": {
                        "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
                        "metrics": [
                            {
                                "timeGrain": "AllMetrics",
                                "enabled": "[parameters('diagnosticsEnabled')]",
                                "retentionPolicy": {
                                    "days": 90,
                                    "enabled": "[parameters('diagnosticsEnabled')]"
                                }
                            }
                        ]
                    }
                } 
            ]*/
        },
        {

            "name": "[variables('sqlserverName')]",
            "type": "Microsoft.Sql/servers",
            "location": "[variables('location')]",
            "tags": {
                "displayName": "SqlServer"
            },
            "apiVersion": "2018-06-01-preview",
            "properties": {
                "administratorLogin": "[variables('sqlAdministratorLogin')]",
                "administratorLoginPassword": "[variables('sqlAdministratorLoginPassword')]",
                "version": "12.0"
            },
            "resources": [
                {
                    "name": "[variables('databaseName')]",
                    "type": "databases",
                    "location": "[variables('location')]",
                    "tags": {
                        "displayName": "Database"
                    },
                    "apiVersion": "2018-06-01-preview",
                    "dependsOn": [
                        "[variables('sqlserverName')]"
                    ],
                    "sku": {
                        "name": "Standard",
                        "tier": "Standard",
                        "capacity": 50
                    },
                    "properties": {
                        "collation": "SQL_Latin1_General_CP1_CI_AS",
                        "maxSizeBytes": "[parameters('databaseMaxSizeBytes')]",
                        "requestedServiceObjectiveName": "Basic"
                    },
                    "resources": [
                        {
                            "condition": "[equals(parameters('restoreDBBackup'),'yes')]",
                            "type": "extensions",
                            "apiVersion": "2014-04-01",
                            "name": "Import",
                            "dependsOn": [
                                "[resourceId('Microsoft.Sql/servers/databases', variables('sqlserverName'), variables('databaseName'))]"
                            ],
                            "properties": {
                                "storageKeyType": "StorageAccessKey",
                                "storageKey": "[parameters('backupStorageAccountKey')]",
                                "storageUri": "[parameters('bacpacUrl')]",
                                "administratorLogin": "[variables('sqlAdministratorLogin')]",
                                "administratorLoginPassword": "[variables('sqlAdministratorLoginPassword')]",
                                "operationMode": "Import"
                            }
                        }
                    ]
                },
                {
                    "type": "firewallrules",
                    "apiVersion": "2018-06-01-preview",
                    "dependsOn": [
                        "[variables('sqlserverName')]"
                    ],
                    "location": "[variables('location')]",
                    "name": "AllowAllWindowsAzureIps",
                    "properties": {
                        "endIpAddress": "0.0.0.0",
                        "startIpAddress": "0.0.0.0"
                    }
                },
                {
                    "type": "firewallrules",
                    "apiVersion": "2018-06-01-preview",
                    "dependsOn": [
                        "[variables('sqlserverName')]"
                    ],
                    "location": "[variables('location')]",
                    "name": "BE Network",
                    "properties": {
                        "endIpAddress": "[variables('endIpAddress')]",
                        "startIpAddress": "[variables('startIpAddress')]"
                    }
                }
                // ,
                // {
                //     "apiVersion": "2020-02-02-preview",
                //     "type": "virtualNetworkRules",
                //     "name": "allow-access-from-apps",
                //     "dependsOn": [
                //         "[resourceId('Microsoft.Sql/servers/', variables('sqlServerName'))]",
                //         "[parameters('vnetId')]"
                //     ],
                //     "properties": {
                //         "virtualNetworkSubnetId": "[parameters('subnetIdApps')]"
                //     }
                // }
            ]
        },
        {
            "apiVersion": "2020-02-02-preview",
            "type": "microsoft.insights/components",
            "name": "[variables('appInsightsNamePortal')]",
            "location": "[variables('location')]",
            "properties": {
                "ApplicationId": "[variables('appInsightsNamePortal')]",
                "Request_Source": "IbizaWebAppExtensionCreate"
            }
        },
        {
            "apiVersion": "2020-02-02-preview",
            "type": "microsoft.insights/components",
            "name": "[variables('appInsightsNameApi')]",
            "location": "[variables('location')]",
            "properties": {
                "ApplicationId": "[variables('appInsightsNameApi')]",
                "Request_Source": "IbizaWebAppExtensionCreate"
            }
        },
        {
            "apiVersion": "2020-02-02-preview",
            "type": "microsoft.insights/components",
            "name": "[variables('appInsightsNameCA')]",
            "location": "[variables('location')]",
            "properties": {
                "ApplicationId": "[variables('appInsightsNameApi')]",
                "Request_Source": "IbizaWebAppExtensionCreate"
            }
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2019-08-01",
            "name": "[variables('appServicePlanName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "[variables('appServicePlanSku')]"
            },
            "kind": "app"
        },
        {
            "type": "Microsoft.Web/certificates",
            "name": "[variables('certificateName')]",
            "apiVersion": "2019-08-01",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverFarms', variables('appServicePlanName'))]"
            ],
            "properties": {
                "keyVaultId": "[parameters('existingKeyVaultId')]",
                "keyVaultSecretName": "[parameters('existingKeyVaultSecretName')]",
                "serverFarmId": "[resourceId('Microsoft.Web/serverFarms', variables('appServicePlanName'))]"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2019-08-01",
            "name": "[variables('portalName')]",
            "location": "[variables('location')]",
            "kind": "app",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverFarms', variables('appServicePlanName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverFarms', variables('appServicePlanName'))]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "WEBSITE_LOAD_CERTIFICATES",
                            "value": "[reference(resourceId('Microsoft.Web/certificates', variables('certificateName'))).Thumbprint]"
                        }
                    ]
                }
            },

            "resources": [
                {
                    "name": "virtualNetwork",
                    "type": "networkConfig",
                    "apiVersion": "2019-08-01",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('portalName'))]"
                    ],
                    "properties": {
                        "subnetResourceId": "[parameters('subnetIdApps')]",
                        "swiftSupported": true
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2019-08-01",
            "name": "[variables('centraladminName')]",
            "location": "[variables('location')]",
            "kind": "app",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverFarms', variables('appServicePlanName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverFarms', variables('appServicePlanName'))]"
            },
            "resources": [
                {
                    "name": "virtualNetwork",
                    "type": "networkConfig",
                    "apiVersion": "2019-08-01",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('centraladminName'))]"
                    ],
                    "properties": {
                        "subnetResourceId": "[parameters('subnetIdApps')]",
                        "swiftSupported": true
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2019-08-01",
            "name": "[variables('apiName')]",
            "location": "[variables('location')]",
            "kind": "app",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverFarms', variables('appServicePlanName'))]"
            ],
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverFarms', variables('appServicePlanName'))]",
                "siteConfig": {
                    "http20Enabled": "true",
                    "minTlsVersion": "1.2",
                    "ipSecurityRestrictions": [
                        {
                            "vnetSubnetResourceId": "[parameters('subnetIdApps')]",
                            "action": "Allow",
                            "tag": "Default",
                            "priority": 200,
                            "name": "appSubnet",
                            "description": "Isolate traffic to subnet containing app services"
                        }
                    ]
                },
                "httpsOnly": true
            },
            "resources": [
                {
                    "name": "virtualNetwork",
                    "type": "networkConfig",
                    "apiVersion": "2019-08-01",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('apiName'))]"
                    ],
                    "properties": {
                        "subnetResourceId": "[parameters('subnetIdApps')]",
                        "swiftSupported": true
                    }
                }
            ]
        }
    ]
}